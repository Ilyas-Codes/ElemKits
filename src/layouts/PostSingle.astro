---
import { humanize, markdownify, slugify } from "@lib/utils/textConverter";
import BackToTop from "./components/BackToTop.astro";
import { FiDownload, FiArrowUpRight } from "react-icons/fi/index";
import { GoCheckCircleFill } from "react-icons/go/index";
import { CgSpinner } from "react-icons/cg/index";
import { BsArrowDownShort } from "react-icons/bs/index";
import {
  PiDesktopFill,
  PiDeviceTabletSpeakerFill,
  PiDeviceMobileSpeakerFill,
} from "react-icons/pi/index";
const { post } = Astro.props;
const {
  title,
  description,
  categories,
  highlights,
  templates,
  iframe,
  download,
} = post.data;
---

<section>
  <article class="space-y-5 p-5 md:space-y-4 md:p-4">
    <div
      class="flex items-end justify-between gap-20 sm:flex-col sm:items-center sm:gap-4"
    >
      <div class="w-[500px] space-y-2 sm:w-full">
        <ul>
          {
            categories.map((category: string, i: number) => (
              <li>
                <a
                  aria-label={post.data.categories}
                  class="hover-transition line-clamp-1 w-fit rounded-lg bg-main-blue px-[10px] py-[6px] text-sm font-medium text-light-blue hover:bg-main-blue/90"
                  href={`/categories/${slugify(category)}`}
                >
                  {humanize(category)}
                  {i !== post.data.categories.length - 1 && ","}
                </a>
              </li>
            ))
          }
        </ul>
        <h1 class="text-xl font-medium" set:html={markdownify(title)} />
      </div>
      <a
        aria-label="download"
        class="lemonsqueezy-button hover-transition flex w-60 items-center justify-center gap-2 rounded-xl bg-main-blue py-4 font-medium text-light-blue hover:bg-main-blue/90 sm:w-full"
        href={download}
      >
        <FiDownload size={20} />
        Download Kit</a
      >
    </div>

    <div
      id="demoContainer"
      class="mx-auto flex h-screen w-full flex-col items-center rounded-xl border-2 border-main-blue bg-white shadow-[-5px_5px_#3CA9EB] dark:bg-accent-blue"
    >
      <div
        id="demoInfo"
        class="flex w-full items-center justify-between rounded-tl-xl rounded-tr-xl p-4 xs:justify-center"
      >
        <p
          id="loadingDemo"
          class="flex items-center gap-2 font-medium xs:hidden"
        >
          <CgSpinner className="animate-spin text-main-blue" size={20} />
          Loading the demo...
        </p>
        <div id="responsiveDemo" class="hidden items-center gap-2 lg:hidden">
          <PiDesktopFill
            id="desktopScreen"
            className="text-main-blue hover:text-main-blue hover-transition cursor-pointer screen-icon"
            size={24}
          />
          <PiDeviceTabletSpeakerFill
            id="tabletScreen"
            className="rotate-180 hover:text-main-blue hover-transition cursor-pointer screen-icon"
            size={24}
          />
          <PiDeviceMobileSpeakerFill
            id="mobileScreen"
            className="rotate-180 hover:text-main-blue hover-transition cursor-pointer screen-icon"
            size={24}
          />
        </div>
        <a
          aria-label="live demo"
          class="group flex items-center gap-1 font-medium"
          target="_blank"
          href={iframe}
          >Live Demo
          <FiArrowUpRight
            className="hover-transition group-hover:text-main-blue group-hover:-translate-y-1 group-hover:translate-x-1"
            size={20}
          />
        </a>
      </div>
      <iframe
        id="demoDisplay"
        class="w-full flex-1 rounded-bl-xl rounded-br-xl border-none outline-none"
        src={iframe}></iframe>
    </div>

    <div
      class="flex w-full items-start justify-evenly gap-10 p-5 lg:flex-col lg:gap-5 md:p-4"
    >
      <div class="w-[500px] space-y-2 lg:w-full">
        <h3 class="text-xl font-medium">Overview</h3>
        <p class="leading-relaxed">{description}</p>
      </div>
      <div class="flex items-start gap-10 lg:w-full sm:flex-col sm:gap-5">
        <div class="space-y-2 sm:order-last">
          <h3 class="text-xl font-medium">Templates</h3>
          <ul id="templates" class="line-clamp-[8] space-y-2">
            {templates.map((template, i) => <li key={i}>{template}</li>)}
          </ul>
          <button
            id="showAllTemplates"
            class="hover-transition flex items-center font-medium text-main-blue hover:text-main-blue/90"
            >Show all
            <BsArrowDownShort size={24} />
          </button>
        </div>
        <div class="space-y-2">
          <h3 class="text-xl font-medium">Highlights</h3>
          <ul class="space-y-2">
            {
              highlights.map((highlight, i) => (
                <li
                  class="line-clamp-1 flex items-center gap-2 truncate break-keep"
                  key={i}
                >
                  <GoCheckCircleFill className="text-main-blue" size={20} />
                  {highlight}
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </div>
  </article>
</section>
<BackToTop />

<script>
  const demo = document.getElementById("demoDisplay");
  const demoInfo = document.getElementById("demoInfo");
  const loading = document.getElementById("loadingDemo");
  const responsiveDemo = document.getElementById("responsiveDemo");
  const templates = document.getElementById("templates");
  const showAllTemplates = document.getElementById("showAllTemplates");

  // iframe loading
  demo.addEventListener("load", function () {
    loading.classList.add("hidden");
    demoInfo.classList.add("lg:justify-center");
    responsiveDemo.classList.remove("hidden");
    responsiveDemo.classList.add("flex");
  });

  // Function to update the width class of demoContainer
  function updateDemoContainerWidth(widthClass) {
    const demoContainer = document.getElementById("demoContainer");
    demoContainer.classList.remove("w-full", "w-[768px]", "w-[400px]");
    demoContainer.classList.add(widthClass);
  }

  // Function to update the active screen icon
  function updateScreenIcons(activeIconId) {
    const screenIcons = document.querySelectorAll(".screen-icon");
    screenIcons.forEach((icon) => {
      if (icon.id === activeIconId) {
        icon.classList.add("text-main-blue");
      } else {
        icon.classList.remove("text-main-blue");
      }
    });
  }

  // Event listener for desktopScreen icon click
  document
    .getElementById("desktopScreen")
    .addEventListener("click", function () {
      updateDemoContainerWidth("w-full");
      updateScreenIcons("desktopScreen");
    });

  // Event listener for tabletScreen icon click (assuming it should reset to w-full)
  document
    .getElementById("tabletScreen")
    .addEventListener("click", function () {
      updateDemoContainerWidth("w-[768px]");
      updateScreenIcons("tabletScreen");
    });

  // Event listener for mobileScreen icon click
  document
    .getElementById("mobileScreen")
    .addEventListener("click", function () {
      updateDemoContainerWidth("w-[400px]");
      updateScreenIcons("mobileScreen");
    });

  // show all templates
  showAllTemplates.addEventListener("click", function () {
    showAllTemplates.classList.add("hidden");
    templates.classList.remove("line-clamp-[8]");
  });
</script>
